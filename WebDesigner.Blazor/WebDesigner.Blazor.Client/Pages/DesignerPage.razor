@page "/designer"
@rendermode InteractiveAuto
@using ScenarioModelling
@using ScenarioModelling.Serialisation.CustomSerialiser.Reserialisation
@using System.Diagnostics
@using System.Text
@using WebDesigner.Blazor.Client.Rendering
@using WebDesigner.Blazor.Client.Services

<PageTitle>Designer</PageTitle>

@* https://github.com/excubo-ag/Blazor.Canvas/blob/main/TestProject_Components/Pages/Context2D/WhiteboardExample.razor *@
@* https://codesandbox.io/p/sandbox/sad-butterfly-1fwo4?file=%2Findex.html *@

@* story timeline : https://codepen.io/cjl750/pen/mXbMyo     *@
@* State machine visualisation : https://codesandbox.io/p/sandbox/state-machine-visualizer-forked-ffj0q *@

<flex class="h" style="flex: 1; width: 100vw !important; height:100vh !important;">
    <flex class="v" style="flex: 3">
        <flex-item style="flex: 5;background-color: indianred;">
            
            <CodeText OnChanged="@OnTextChanged" />

        </flex-item>
        <flex-resizer></flex-resizer>
        <flex style="flex: 1; background-color: darkorange;">

            <OutputText TextLines="@OutputText" />

        </flex>
    </flex>
    <flex-resizer></flex-resizer>
    <flex class="v" style="flex: 5;">
        
        <Header/>
        
        <static-separator />

        <flex class="h" style="flex: 7">
            
            <MetaStoryGraph VisualGraphElements="@VisualGraphElements" OnClickGraphNode="@OnClickGraphNode" />

            <flex-resizer></flex-resizer>

            <StateGraph />

        </flex>

        <flex-resizer></flex-resizer>

        <StoryTimeline VisualStoryElements="@VisualStoryElements" />

        <static-separator />

        <StoryControls OnClickBackButton="@OnClickBackButton"
                       OnClickNextButton="@OnClickNextButton"
                       OnClickEnterButton="@OnClickEnterButton"
                       OnClickRestartButton="@OnClickRestartButton"
                       OnClickFastForwardButton="@OnClickFastForwardButton" />
    
    </flex>
</flex>


@code {

    [Inject]
    public IJSRuntime JS { get; set; } = default!;

    public List<OutputItem> OutputText { get; set; } = new();

    public List<VisualMetaStoryGraphElement> VisualGraphElements { get; set; } = new();
    public List<VisualStoryTimeLineElement> VisualStoryElements { get; set; } = new()
    {
        new VisualStoryTimeLineElement("1", "Hello", "Dialog: Hello"),
        new VisualStoryTimeLineElement("2", "T1", "Transition T1 on Object1"),
        new VisualStoryTimeLineElement("3", "", "Transition T1 on Object1"),
    };

    // public int ViewportWidth { get; set; }
    // public int ViewportHeight { get; set; }

    private string _synchronisedCodeText = "";
    private System.Timers.Timer? _debounceTimer;

    // [JSInvokable]
    // public void OnResize(double width, double height)
    // {
    //     if (ViewportWidth == width && ViewportHeight == height)
    //         return;

    //     ViewportWidth = (int)width;
    //     ViewportHeight = (int)height;
    //     StateHasChanged();
    //     RefreshCanvasRendering();
    // }

    private void OnTextChanged(ChangeEventArgs args)
    {
        _synchronisedCodeText = args.Value?.ToString() ?? "";

        RefreshCanvasRendering();
    }

    private void RefreshCanvasRendering()
    {
        // Debounce reset
        _debounceTimer?.Stop();
        _debounceTimer?.Start();
    }

    protected override Task OnInitializedAsync()
    {
        _debounceTimer = new System.Timers.Timer(300); // debounce delay
        _debounceTimer.AutoReset = false;
        _debounceTimer.Elapsed += async (sender, e) =>
        {
            _debounceTimer.Stop();

            await UpdateCanvasFromText(_synchronisedCodeText);
        };

        return base.OnInitializedAsync();
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (!firstRender)
            return;

        await JS.InvokeVoidAsync("window.initJSInterop", DotNetObjectReference.Create(this));
        await UpdateCanvasFromText(TestData.StartingText);
    }

    private async Task UpdateCanvasFromText(string newCode)
    {
        Stopwatch sw = Stopwatch.StartNew();

        try
        {
            OutputText.Clear();
            VisualGraphElements.Clear();

            ScenarioModellingContainer container = new();
            var scope = container.StartScope();

            var disposeAll = (EventHandler)((object? sender, EventArgs args) =>
            {
                container.Dispose();
                scope.Dispose();
            });

            var context =
                scope.Context
                     .UseSerialiser<CustomContextSerialiser>();

            try
            {
                context.LoadContext(newCode.SetWindowsLineEndings()).Initialise();
            }
            catch (Exception ex)
            {
                await RenderLog(ex.Message, OutputItemType.Error);

                return;
            }

            if (context.ValidationErrors.Count != 0)
            {
                await RenderLog(context.ValidationErrors.CommaSeparatedList(), OutputItemType.Error);

                return;
            }

            var metaStory = context.MetaStories.FirstOrDefault();

            if (metaStory != null)
            {
                Renderer renderer = new();
                renderer.OnDispose += disposeAll;

                await RenderLog($"Preparation time : {sw.ElapsedMilliseconds}ms");

                Stopwatch swRender = Stopwatch.StartNew();

                await renderer.Render(metaStory, VisualGraphElements, RenderLog);

                swRender.Stop();

                await RenderLog($"Render time : {swRender.ElapsedMilliseconds}ms");
            }
            else
            {
                disposeAll(null, EventArgs.Empty);
            }
        }
        finally
        {
            sw.Stop();
            await RenderLog($"Total time: {sw.ElapsedMilliseconds}ms");

            await InvokeAsync(StateHasChanged);
        }
    }

    private async Task RenderLog(string message, OutputItemType type = OutputItemType.Info)
    {
        OutputText.Add(new(message, type));
        var _ = Task.Run(async () => await JS.InvokeVoidAsync("console.log", [message]));
    }

    private async Task OnClickGraphNode(MouseEventArgs args)
    {
        // TODO get a reference to the clicked element
    }


    [JSInvokable]
    public async Task OnClickBackButton()
    {

    }

    [JSInvokable]
    public async Task OnClickNextButton()
    {

    }

    [JSInvokable]
    public async Task OnClickEnterButton()
    {

    }

    [JSInvokable]
    public async Task OnClickRestartButton()
    {

    }

    [JSInvokable]
    public async Task OnClickFastForwardButton()
    {

    }
}
