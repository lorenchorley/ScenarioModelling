////Generated by the GOLD Parser Builder

//using System.IO;
//using System.Windows.Forms;

//class MyParser
//{
//    private GOLD.Parser parser = new GOLD.Parser(); 

//    private enum SymbolIndex
//    {

//    }

//    private enum ProductionIndex
//    {

//    }

//    public object program;     //You might derive a specific object

//    public void Setup()
//    {
//        //This procedure can be called to load the parse tables. The class can
//        //read tables using a BinaryReader.

//        parser.LoadTables(Path.Combine(Application.StartupPath, "grammar.egt"));
//    }

//    public bool Parse(TextReader reader)
//    {
//        //This procedure starts the GOLD Parser Engine and handles each of the
//        //messages it returns. Each time a reduction is made, you can create new
//        //custom object and reassign the .CurrentReduction property. Otherwise, 
//        //the system will use the Reduction object that was returned.
//        //
//        //The resulting tree will be a pure representation of the language 
//        //and will be ready to implement.

//        GOLD.ParseMessage response; 
//        bool done;                      //Controls when we leave the loop
//        bool accepted = false;          //Was the parse successful?

//        parser.Open(reader);
//        parser.TrimReductions = false;  //Please read about this feature before enabling  

//        done = false;
//        while (!done)
//        {
//            response = parser.Parse();

//            switch (response)
//            {
//                case GOLD.ParseMessage.LexicalError:
//                    //Cannot recognize token
//                    done = true;
//                    break;

//                case GOLD.ParseMessage.SyntaxError:
//                    //Expecting a different token
//                    done = true;
//                    break;

//                case GOLD.ParseMessage.Reduction:
//                    //Create a customized object to store the reduction

//                    parser.CurrentReduction = CreateNewObject(parser.CurrentReduction as GOLD.Reduction);
//                    break;

//                case GOLD.ParseMessage.Accept:
//                    //Accepted!
//                    //program = parser.CurrentReduction   //The root node!                 
//                    done = true;
//                    accepted = true;
//                    break;

//                case GOLD.ParseMessage.TokenRead:
//                    //You don't have to do anything here.
//                    break;

//                case GOLD.ParseMessage.InternalError:
//                    //INTERNAL ERROR! Something is horribly wrong.
//                    done = true;
//                    break;

//                case GOLD.ParseMessage.NotLoadedError:
//                    //This error occurs if the CGT was not loaded.                   
//                    done = true;
//                    break;

//                case GOLD.ParseMessage.GroupError: 
//                    //GROUP ERROR! Unexpected end of file
//                    done = true;
//                    break;
//            } 
//        } //while

//        return accepted;
//    }

//    private object CreateNewObject(GOLD.Reduction r)
//    { 
//        object result = null;

//        switch( (ProductionIndex) r.Parent.TableIndex)
//        {
//            case ProductionIndex.Nl_Newline:                 
//                // <nl> ::= NewLine <nl>
//                break;

//            case ProductionIndex.Nl_Newline2:                 
//                // <nl> ::= NewLine
//                break;

//            case ProductionIndex.Nlo_Newline:                 
//                // <nlo> ::= NewLine <nlo>
//                break;

//            case ProductionIndex.Nlo:                 
//                // <nlo> ::= 
//                break;

//            case ProductionIndex.String_Identifier:                 
//                // <String> ::= Identifier
//                break;

//            case ProductionIndex.String_Stringliteral:                 
//                // <String> ::= StringLiteral
//                break;

//            case ProductionIndex.Expressionblock_Expressionblock:                 
//                // <ExpressionBlock> ::= ExpressionBlock
//                break;

//            case ProductionIndex.Program:                 
//                // <Program> ::= <Definitions>
//                break;

//            case ProductionIndex.Definitions:                 
//                // <Definitions> ::= <Definitions> <Definition>
//                break;

//            case ProductionIndex.Definitions2:                 
//                // <Definitions> ::= <nlo>
//                break;

//            case ProductionIndex.Definition:                 
//                // <Definition> ::= <NamedDefinition>
//                break;

//            case ProductionIndex.Definition2:                 
//                // <Definition> ::= <UnnamedDefinition>
//                break;

//            case ProductionIndex.Definition3:                 
//                // <Definition> ::= <NamedLink>
//                break;

//            case ProductionIndex.Definition4:                 
//                // <Definition> ::= <UnnamedLink>
//                break;

//            case ProductionIndex.Definition5:                 
//                // <Definition> ::= <Transition>
//                break;

//            case ProductionIndex.Definition6:                 
//                // <Definition> ::= <ExpressionDefinition>
//                break;

//            case ProductionIndex.Nameddefinition_Lbrace_Rbrace:                 
//                // <NamedDefinition> ::= <String> <String> <nlo> '{' <nlo> <Definitions> <nlo> '}' <nl>
//                break;

//            case ProductionIndex.Nameddefinition:                 
//                // <NamedDefinition> ::= <String> <String> <nl>
//                break;

//            case ProductionIndex.Unnameddefinition_Lbrace_Rbrace:                 
//                // <UnnamedDefinition> ::= <String> <nlo> '{' <nlo> <Definitions> <nlo> '}' <nl>
//                break;

//            case ProductionIndex.Unnameddefinition:                 
//                // <UnnamedDefinition> ::= <String> <nl>
//                break;

//            case ProductionIndex.Unnamedlink_Minusgt:                 
//                // <UnnamedLink> ::= <String> '->' <String> <nl>
//                break;

//            case ProductionIndex.Namedlink_Minusgt_Colon:                 
//                // <NamedLink> ::= <String> '->' <String> ':' <String> <nl>
//                break;

//            case ProductionIndex.Expressiondefinition_Lbrace_Rbrace:                 
//                // <ExpressionDefinition> ::= <String> <ExpressionBlock> <nlo> '{' <nlo> <Definitions> <nlo> '}' <nl>
//                break;

//            case ProductionIndex.Expressiondefinition:                 
//                // <ExpressionDefinition> ::= <String> <ExpressionBlock> <nl>
//                break;

//            case ProductionIndex.Expressiondefinition2:                 
//                // <ExpressionDefinition> ::= <ExpressionBlock> <nl>
//                break;

//            case ProductionIndex.Transition_Colon:                 
//                // <Transition> ::= <String> ':' <String> <nl>
//                break;

//        }  //switch

//        return result;
//    }

//}; //MyParser
